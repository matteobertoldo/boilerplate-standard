<script type="text/javascript">
/**
 * @function: RGBtoHEX
 * @return: {String}
 */

function RGBtoHEX(r, g, b) {
    var rgb = b | (g << 8) | (r << 16);

    return (0x1000000 | rgb).toString(16).substring(1);
}

/**
 * @function: invertColor
 * @param: {String} hex - HEX code
 * @param: {Bool} bw - Dinamically set black or white the final color.
 * @return: {String}
 * @link: https://github.com/onury/invert-color
 */

function padZero(str, len) {
    len = len || 2;
    var zeros = new Array(len).join('0');

    return (zeros + str).slice(-len);
}

function invertColor(hex, bw) {
    if (hex.indexOf('#') === 0) {
        hex = hex.slice(1);
    }

    if (hex.length === 3) {
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    }

    if (hex.length !== 6) {
        throw new Error('Invalid HEX color.');
    }

    var r = parseInt(hex.slice(0, 2), 16),
    g = parseInt(hex.slice(2, 4), 16),
    b = parseInt(hex.slice(4, 6), 16);

    if (bw) {
        return (r * 0.299 + g * 0.587 + b * 0.114) > 186 ? '#000000' : '#FFFFFF';
    }

    r = (255 - r).toString(16);
    g = (255 - g).toString(16);
    b = (255 - b).toString(16);

    return "#" + padZero(r) + padZero(g) + padZero(b);
}

/**
 * @function: color_convert
 * @description: Convert to `rgb` or `hex` an HTML color name.
 * @link: https://www.w3schools.com/colors/colors_names.asp
 * @link: https://gist.github.com/njvack/02ad8efcb0d552b0230d
 */

color_convert = function() {
    var pub = {}, canvas, context;
    canvas = document.createElement('canvas');
    canvas.height = 1;
    canvas.width = 1;
    context = canvas.getContext('2d');

    function byte_to_hex(byte) {
        return ('0' + byte.toString(16)).slice(-2);
    }

    pub.to_rgba_array = function(color) {
        context.fillStyle = 'rgba(0, 0, 0, 0)';
        context.clearRect(0, 0, 1, 1);
        context.fillStyle = color;
        context.fillRect(0, 0, 1, 1);
        return context.getImageData(0, 0, 1, 1).data;
    }

    pub.to_rgba = function(color) {
        var a = pub.to_rgba_array(color);
        return 'rgba('+ a[0] +','+ a[1] +','+ a[2] +','+ (a[3]/255) +')';
    }

    pub.to_hex = function(color) {
        var a = pub.to_rgba_array(color);
        var hex = [0,1,2].map(function(i) {
            return byte_to_hex(a[i])
        }).join('');

        return '#' + hex;
    }

    return pub;
}();

/**
 * @function: createPaletteElements
 * @param: {RegEX|String} selector - The selector to render the list of color palettes.
 * @param: {String} style - The css property of the selector.
 * @param: {Arr|Obj} sheet - The style sheet to intercept the selectors.
 * @author: mbertoldo@alpenite.com
 */

function createPaletteElements(selector, style, sheet) {
    var sheets = typeof sheet !== 'undefined' ? [sheet] : document.styleSheets[0];
    var setAttributes = function(el, attrs) {
        for (var key in attrs) {
            el.setAttribute(key, attrs[key]);
        }
    };

    for (var j = 0, k = sheets.cssRules.length || sheets.rules.lenght; j < k; j++) {
        var rule = sheets.cssRules[j] || sheets.rules[j];

        if (selector.test(rule.selectorText)) {
            var selectors = rule.selectorText.replace(/\.palette-color-/g,'');
            var rgb = rule.style[style].split(',');
            var transparent = false;

            if (rgb.length > 1) {
                var r = rgb[0].replace('rgb(', '');
                var g = rgb[1];
                var b = rgb[2].replace(')', '');
                var hex = RGBtoHEX(r, g, b);
                var hextext = '#' + hex.toString();
            } else {
                var hex = color_convert.to_hex(rgb[0]);
                var hextext = rgb[0];

                if (rgb[0] == 'transparent' || rgb[0] == '') {
                    transparent = true;
                    hex = '#FFFFFF';
                }

                if (rgb[0] == '') {
                    hextext = 'invalid HEX';
                }
            }

            var color = invertColor(hex, true);
            var list = document.createElement('li');
            var div = document.createElement('div');
            var copy = document.createElement('div');
            var span = document.createElement('span');
            var strong = document.createElement('strong');
            var em = document.createElement('em');
            var rgbtext = rule.style[style].toString();

            copy.appendChild(document.createTextNode('Copied to clipboard!'));
            span.appendChild(document.createTextNode(hextext));
            strong.appendChild(document.createTextNode(selectors));
            em.appendChild(document.createTextNode(rgbtext));

            setAttributes(div, {
                class: 'render-hex',
                style: 'color:' + color + ';',
            });

            copy.setAttribute('class', 'copied-to-clipboard');
            div.appendChild(copy);
            div.appendChild(strong);
            div.appendChild(span);
            div.appendChild(em);

            list.appendChild(div);
            list.setAttribute('style', 'background-color:' + hextext + ';');

            if (transparent) {
                list.setAttribute('class', 'transparent');
            }

            document.getElementById('palette-list').appendChild(list);
        }
    }
}

function warnPaletteEmpty() {
    var paletteList = document.getElementById('palette-list');
    var h2 = document.createElement('h2');
    h2.innerHTML = 'It looks like you have not installed any palette color. <br /> Set on your <code class="scss">css/scss</code> some class like <code class="selector">.palette-color-primary</code>.';

    if (paletteList.children.length == 0) {
        paletteList.appendChild(h2);
    }
}

function copyToClipboardHEX() {
    var paletteList = document.querySelectorAll('#palette-list > li');

    for (var i = 0; i < paletteList.length; i++) {
        paletteList[i].addEventListener('click', function(event) {
            var self = this;
            var renderHEX = self.querySelector('.render-hex');

            renderHEX.classList.add('perspective');
            setTimeout(function() {
                renderHEX.classList.remove('perspective');
            }, 1525);
        });
    }

    new ClipboardJS('#palette-list > li', {
        text: function(trigger) {
            return trigger.querySelector('span').innerText;
        }
    });
}

window.addEventListener('load', function() {
    createPaletteElements(/^\.palette-color-[^ ]+$/, 'color');
    warnPaletteEmpty();
    copyToClipboardHEX();
});
</script>
