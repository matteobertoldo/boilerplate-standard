// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////
/// @group float grid
////

/// Calculates the width of a column based on a number of factors.
/// @param {Number|List} $columns
/// @returns {Number} A calculated percentage value.
@function grid-column($columns) {
	$width: 0%;

	@if type-of($columns) == 'number' {
		@if unit($columns) == '%' {
			$width: $columns;
		} @else if $columns < 1 {
			$width: percentage($columns);
		} @else {
			$width: percentage($columns / $grid-column-count);
		}
	} @else if type-of($columns) == 'list' {
		@if length($columns) != 3 {
			@error 'Wrong syntax for grid-column(). Use the format "n of n".';
		} @else {
			$width: percentage(nth($columns, 1) / nth($columns, 3));
		}
	} @else {
		@error 'Wrong syntax for grid-column(). Use a number, decimal, percentage, or "n of n".';
	}

	@return $width;
}

// Shorthand for `grid-column()`.
// @alias grid-column
@function grid-col($columns: $grid-column-count) {
	@return grid-column($columns);
}

// Get a gutter size for a given breakpoint
// @param {Keyword} $breakpoint [small] - Breakpoint name.
// @param {Number|Map} $gutters [$grid-column-gutter] - Gutter map or single value to use. Responsive gutter settings by default.
// @returns {Number} Gutter size.
@function grid-column-gutter($breakpoint: $-zf-zero-breakpoint, $gutters: $grid-column-gutter) {
	@if type-of($gutters) == 'number' {
		@return $gutters;
	}

	@return -zf-get-bp-val($gutters, $breakpoint);
}

// Change the behavior of columns defined inside this mixin to use a different column count.
// @param {Number} $columns - Number of columns to use.
// @param {Boolean} $root [false]
// If `false`, selectors inside this mixin will nest inside the parent selector.
// If `true`, selectors will not nest.
@mixin grid-context($columns, $root: false) {
    $old-grid-column-count: $grid-column-count;
    $grid-column-count: $columns !global;

    @if $root {
        @at-root {
            @content;
        }
    } @else {
        @content;
    }

    $grid-column-count: $old-grid-column-count !global;
}

/// Creates a grid row.
/// @param {Number} $columns [null] - Column count for this row. `null` will use the default column count.
/// @param {Keywords} $behavior [null] - Modifications to the default grid styles. `nest` indicates the row will be placed inside another row. `collapse` indicates that the columns inside this row will not have padding. `nest collapse` combines both behaviors.
/// @param {Keyword|Number} $size [$grid-row-width] Maximum size of the row. Set to `expand` to make the row taking the full width.
/// @param {Boolean} $cf [true] - Whether or not to include a clearfix.
/// @param {Number|Map} $gutters [$grid-column-gutter] - Gutter map or single value to use when inverting margins. Responsive gutter settings by default.
@mixin grid-row($columns: null, $behavior: null, $size: $grid-row-width, $cf: true, $gutters: $grid-column-gutter) {
	$margin: auto;

	@if index($behavior, nest) != null {
		@include grid-row-nest($gutters);

		@if index($behavior, collapse) != null {
			margin-left: 0;
			margin-right: 0;
		}
	} @else {
		@include grid-row-size($size);
		margin-left: auto;
		margin-right: auto;
	}

	@if $cf {
		@include clearfix;
	}

	@if $columns != null {
		@include grid-context($columns) {
			@content;
		}
	}
}

/// Inverts the margins of a row to nest it inside of a column.
/// @param: {Number|Map} $gutters [$grid-column-gutter]
/// Gutter map or single value to use when inverting margins. Responsive gutter settings by default.
@mixin grid-row-nest($gutters: $grid-column-gutter) {
	@include -zf-each-breakpoint {
		$margin: grid-column-gutter($-zf-size, $gutters) / 2 * - 1;
		margin-left: $margin;
		margin-right: $margin;
	}
}

/// Set a grid row size
/// @param: {Keyword|Number} $size [$grid-row-width] Maximum size of the row.
/// Set to `expand` to make the row taking the full width.
@mixin grid-row-size($size: $grid-row-width) {
	@if $size == expand {
		$size: none;
	}

    max-width: $size;
}

/// Creates a grid column.
/// @param {Mixed} $columns [$grid-column-count] - Width of the column. Refer to the `grid-column()` function to see possible values.
/// @param {Mixed} $gutters [$grid-column-gutter] - Spacing between columns. Refer to the `grid-column-gutter()` function to see possible values.
@mixin grid-column($columns: $grid-column-count, $gutters: $grid-column-gutter) {
	@include grid-column-size($columns);
	float: $global-left;
	@include grid-column-gutter($gutters: $gutters);

	@if $grid-column-align-edge {
		&:last-child:not(:first-child) {
			float: $global-right;
		}
	}
}

/// Creates a grid column row. This is the equivalent of adding `.row` and `.column` to the same element.
/// @param {Mixed} $gutters [$grid-column-gutter] - Width of the gutters on either side of the column row. Refer to the `grid-column-gutter()` function to see possible values.
@mixin grid-column-row($gutters: $grid-column-gutter) {
	@include grid-row;
	@include grid-column($gutters: $gutters);

	&, &:last-child {
		float: none;
	}
}

// Shorthand for `grid-column()`.
// @alias grid-column
@mixin grid-col($columns: $grid-column-count, $gutters: $grid-column-gutter) {
	@include grid-column($columns, $gutters);
}

// Shorthand for `grid-column-row()`.
// @alias grid-column-row
@mixin grid-col-row($gutters: $grid-column-gutter) {
	@include grid-column-row($gutters);
}

/// Set the width of a grid column.
/// @param {Number|List} $width [$grid-column-count] - Width to make the column. You can pass in any value accepted by the `grid-column()` function, such as `6`, `50%`, or `1 of 2`.
@mixin grid-column-size($columns: $grid-column-count) {
	width: grid-column($columns);
}

// Shorthand for `grid-column-size()`.
// @alias grid-column-size
@mixin grid-col-size($columns: $grid-column-count) {
	@include grid-column-size($columns);
}

/// Reposition a column.
/// @param {Number|Keyword} $position - Direction and amount to move. The column will move equal to the width of the column count specified. A positive number will push the column to the right, while a negative number will pull it to the left. Set to center to center the column.
@mixin grid-column-position($position) {
	@if type-of($position) == 'number' {
		$offset: percentage($position / $grid-column-count);

		position: relative;
		#{$global-left}: $offset;
	} @else if $position == center {
		&, &:last-child:not(:first-child) {
			float: none;
			clear: both;
		}

		margin-left: auto;
		margin-right: auto;
	} @else {
		@warn 'Wrong syntax for grid-column-position(). Enter a positive or negative number, or center.';
	}
}

/// Reset a position definition.
@mixin grid-column-unposition {
	position: static;
	float: $global-left;
	margin-left: 0;
	margin-right: 0;
}

/// Offsets a column to the right by `$n` columns.
/// @param {Number|List} $n - Width to offset by. You can pass in any value accepted by the `grid-column()` mixin, such as `6`, `50%`, or `1 of 2`.
@mixin grid-column-offset($n) {
	margin-#{$global-left}: grid-column($n);
}

// Disable the default behavior of the last column in a row aligning to the opposite edge.
@mixin grid-column-end {
	&:last-child:last-child {
		float: $global-left;
	}
}

// Shorthand for `grid-column-position()`.
// @alias grid-column-position
@mixin grid-col-pos($position) {
	@include grid-column-position($position);
}

// Shorthand for `grid-column-unposition()`.
// @alias grid-column-unposition
@mixin grid-col-unpos {
	@include grid-column-unposition;
}

// Shorthand for `grid-column-offset()`.
// @alias grid-column-offset
@mixin grid-col-off($n) {
	@include grid-column-offset($n);
}

// Shorthand for `grid-column-end()`.
// @alias grid-column-end
@mixin grid-col-end {
	@include grid-column-end;
}

/// Set the gutters on a column
/// Spacing between columns, accepts multiple values:
/// - A single value will make the gutter that exact size.
/// - A breakpoint name will make the gutter the corresponding size in the $gutters map.
/// - "auto" will make the gutter responsive, using the $gutters map values.
/// @param {Number|Keyword} $gutter [auto]
/// @param {Number|Map} $gutters [$grid-column-gutter] - Gutter map or single value to use. Responsive gutter settings by default.
@mixin grid-column-gutter($gutter: auto, $gutters: $grid-column-gutter) {
    @include -zf-breakpoint-value($gutter, $gutters) {
        $padding: $-zf-bp-value / 2;
        padding-right: $padding;
        padding-left: $padding;
    }
}

/// Collapse the gutters on a column by removing the padding.
/// Only use this mixin within a breakpoint. To collapse a column's gutters on all screen sizes, use the `$gutter` parameter of the `grid-column()` mixin instead.
@mixin grid-column-collapse {
    @include grid-column-gutter(0);
}

// Shorthand for `grid-column-gutter()`.
// @alias grid-column-gutter
@mixin grid-col-gutter($gutter: auto,$gutters: $grid-column-gutter) {
    @include grid-column-gutter($gutter, $gutters);
}

// Shorthand for `grid-column-collapse()`.
// @alias grid-column-collapse
@mixin grid-col-collapse {
    @include grid-column-collapse;
}

/// Sets bottom margin on grid columns to match gutters
/// @param {Number|Keyword} $margin [auto]
/// The bottom margin on grid columns, accepts multiple values:
/// - A single value will make the margin that exact size.
/// - A breakpoint name will make the margin the corresponding size in the $margins map.
/// - "auto" will make the margin responsive, using the $margins map values.
/// @param {Number|Map} $margins [$grid-column-gutter] - Map or single value to use. Responsive gutter settings by default.
@mixin grid-column-margin ($margin: auto, $margins: $grid-column-gutter) {
    @include -zf-breakpoint-value($margin, $margins) {
        $margin-bottom: rem-calc($-zf-bp-value);
        margin-bottom: $margin-bottom;

        > :last-child {
            margin-bottom: 0;
        }
    }
}

/// Sizes child elements so that `$n` number of items appear on each row.
/// @param {Number} $n - Number of elements to display per row.
/// @param {String} $selector ['.column'] - Selector(s) to use for child elements.
/// @param {Number|List} $gutter
/// The gutter to apply to child elements. Accepts multiple values:
/// `$grid-column-gutter` will use the values in the `$grid-column-gutter map/, including breakpoint sizes.
/// A fixed numeric value will apply this gutter to all breakpoints.
@mixin grid-layout($n, $selector: '.column', $gutter: null) {
    & > #{$selector} {
        float: $global-left;
        width: percentage(1/$n);

        @if($gutter) {
            @if type-of($gutter) == 'map' {
                @each $breakpoint, $value in $gutter {
                    $padding: $value / 2;
                    @include breakpoint($breakpoint) {
                        padding-left: $padding;
                        padding-right: $padding;
                    }
                }
            } @else if type-of($gutter) == 'number' and strip-unit($gutter) > 0 {
                $padding: $gutter / 2;
                padding-left: $padding;
                padding-right: $padding;
            }
        }

        &:nth-of-type(1n) {
            clear: none;
        }

        &:nth-of-type(#{$n}n+1) {
            clear: both;
        }

        &:last-child {
            float: $global-left;
        }
    }
}

// Outputs CSS classes for the float grid.
@mixin foundation-grid($row: 'row', $column: 'column', $column-row: 'column-row', $gutter: 'gutter', $push: 'push', $pull: 'pull', $center: 'centered', $uncenter: 'uncentered', $collapse: 'collapse', $uncollapse: 'uncollapse', $offset: 'offset', $end: 'end', $expanded: 'expanded', $block: 'block') {
	/*@foundation-grid classes (6.4)*/
    .#{$row} {
        @include grid-row;

        &.#{$collapse} {
            > .#{$column} {
                @include grid-col-collapse;
            }
        }

        & .#{$row} {
            @include grid-row-nest($grid-column-gutter);

            &.#{$collapse} {
                margin-left: 0;
                margin-right: 0;
            }
        }

        &.#{$expanded} {
            @include grid-row-size(expand);

            .#{$row} {
                margin-left: auto;
                margin-right: auto;
            }
        }

        @each $breakpoint, $value in $grid-column-gutter {
            &.#{$gutter}-#{$breakpoint} {
                > .#{$column} {
                    @include grid-col-gutter($value);
                }
            }
        }
    }

    .#{$column} {
        @include grid-col;

        @if $grid-column-align-edge {
            &.#{$end} {
                @include grid-col-end;
            }
        }
    }

    .#{$column}.#{$row}.#{$row} {
        float: none;
    }

    .#{$row} .#{$column}.#{$row}.#{$row} {
        padding-left: 0;
        padding-right: 0;
        margin-left: 0;
        margin-right: 0;
    }

    @include -zf-each-breakpoint {
        @for $i from 1 through $grid-column-count {
            .#{$-zf-size}-#{$i} {
                @include grid-col-size($i);
            }

            @if $i < $grid-column-count {
                .#{$-zf-size}-#{$push}-#{$i} {
                    @include grid-col-pos($i);
                }

                .#{$-zf-size}-#{$pull}-#{$i} {
                    @include grid-col-pos(-$i);
                }
            }

            $o: $i - 1;

            .#{$-zf-size}-#{$offset}-#{$o} {
                @include grid-col-off($o);
            }
        }

        @for $i from 1 through $block-grid-max {
            .#{$-zf-size}-up-#{$i} {
                @include grid-layout($i, '.#{$column}');
            }
        }

        .#{$-zf-size}-#{$collapse} {
            > .#{$column} {
                @include grid-col-collapse;
            }

            .#{$row} {
                margin-left: 0;
                margin-right: 0;
            }
        }

        .#{$expanded}.#{$row} .#{$-zf-size}-#{$collapse}.#{$row} {
            margin-left: 0;
            margin-right: 0;
        }

        .#{$-zf-size}-#{$uncollapse} {
            > .#{$column} {
                @include grid-col-gutter($-zf-size);
            }
        }

        @if $center {
            .#{$-zf-size}-#{$center} {
                @include grid-col-pos(center);
            }
        }

        .#{$-zf-size}-#{$center} {
            @include grid-col-pos(center);
        }

		$-gutter-unpos-selector: (
			if($uncenter, '.#{$-zf-size}-#{$uncenter}', null),
			if($push, '.#{$-zf-size}-#{$push}-0', null),
			if($pull, '.#{$-zf-size}-#{$pull}-0', null),
		);

		@if ($uncenter or $push or $pull) {
			#{$-gutter-unpos-selector} {
				@include grid-col-unpos;
			}
	    }

        .#{$-zf-size}-#{$pull}-0,
        .#{$-zf-size}-#{$push}-0,
        .#{$-zf-size}-#{$uncenter} {
            @include grid-col-unpos;
        }
    }

	.#{$column}-#{$block} {
    	@include grid-column-margin;
	}

    @if $column == 'column' and has-value($grid-column-alias) {
        .#{$grid-column-alias} {
            @extend .column;
        }
    }
}
