// RenderKit
// github.com/matteobertoldo/renderkit
// Licensed under MIT Open Source

////
/// @group form
////

/// Mixin for generate an "caret" for custom select without js added.
/// @param {String} $select-caret-color - The color in `hex` value for the caret color.
/// @access private
@mixin select-caret-shape($select-caret-color: #000, $select-caret-shape: 'arrow') {
    $shape: '';
    $viewbox-value: '';

    // Transform `hex` to `rgb` the caret color
    $caret-color: 'rgb%28#{round(red($select-caret-color))}, #{round(green($select-caret-color))}, #{round(blue($select-caret-color))}%29';

    @if ($select-caret-shape == 'triangle') {
        $viewbox-value: '24';
        $shape: "<polygon fill='#{$caret-color}' points='0,0 32,0 16,24'></polygon>";
    } @else if ($select-caret-shape == 'arrow') {
        $viewbox-value: '19';
        $shape: "<path fill='#{$caret-color}' d='M16,19.2L0,3.8L4.6,0L16,11.5L27.4,0L32,3.8L16,19.2z'/>";
    } @else if ($select-caret-shape == 'empty') {
        $viewbox-value: null;
        $shape: null;
    } @else {
        @warn 'Incorrect value. Please choose between `arrow`, `triangle` or `empty` to set the caret for select.';
    }

    @if ($global-select-reset-appearence) {
        @if ($select-caret-shape != 'empty') {
            background-image: url("data:image/svg+xml;utf8,<svg width='100%' height='100%' xmlns='http://www.w3.org/2000/svg' version='1.1' viewBox='0 0 32 #{$viewbox-value}'>#{$shape}</svg>");
        }
    }
}

@mixin form-style {
    /*@form style*/
    .#{$global-inputs-rowclass} {
        position: relative;

        .#{$global-inputs-labelclass} {
            display: block;
            font: {
                family: $input-label-font-family;
                size: $input-label-font-size;
            }
            letter-spacing: $input-label-letter-spacing;
            text-transform: $input-label-text-transform;
            color: $input-label-color;
            margin: $input-label-margin;

            &.#{$validation-input-error-class} {
                color: $validation-input-error-label-color;
            }
        }

        %style-inputs {
            display: block;
            width: 100%;
            height: $global-input-height;
            font: {
                family: $global-input-font-family;
                size: $global-input-font-size;
            }
            letter-spacing: $global-input-letter-spacing;
            text-transform: $global-input-text-transform;
            background-color: $global-input-background-color;
            color: $global-input-color;
            border: $global-input-border;
            border-radius: $global-input-border-radius;
            padding: $global-input-padding;
            transition: $global-input-transition;

            &:focus {
                border-color: $global-focus-input-border-color;
            }

            @if ($global-hover-input-border) {
                &:hover:not([disabled]) {
                    border-color: $global-hover-input-border-color;
                }
            }

            // Reset Firefox/Gecko pseudo `:require` & `:invalid` attributes.
            &:required,
            &:invalid {
                box-shadow: none;
            }

            // Validation/Error class
            &.#{$validation-input-error-class} {
                border-color: $validation-input-error-border-color;
                background-color: $validation-input-error-background-color;
                color: $validation-input-error-color;

                &:hover, &:focus {
                    border-color: $validation-input-error-border-color;
                    background-color: $validation-input-error-background-color;
                }
            }
        }

        %placeholder-style {
            &::placeholder {
                font: {
                    family: $global-input-placeholder-font-family;
                    style: $global-input-placeholder-font-style;
                }
                text-transform: $global-input-placeholder-text-transform;
                color: $global-input-placeholder-color;
                opacity: 1;
            }

            @if ($global-input-placeholder-focus-hidden) {
                &:focus {
                    &::placeholder {
                        opacity: 0;
                    }
                }
            } @else {
                &:focus {
                    &::placeholder {
                        color: $global-input-placeholder-focus-color;
                        opacity: 1;
                    }
                }
            }

            &.#{$validation-input-error-class} {
                &::placeholder {
                    color: $validation-input-error-placeholder-color;
                    opacity: 1;
                }

                @if ($global-input-placeholder-focus-hidden) {
                    &:focus {
                        &::placeholder {
                            opacity: 0;
                        }
                    }
                } @else {
                    &:focus {
                        &::placeholder {
                            color: $global-input-placeholder-focus-color;
                            opacity: 1;
                        }
                    }
                }
            }
        }

        %autofill {
            @if ($input-custom-autofill) {
                &:-webkit-autofill,
                &:-webkit-autofill:hover,
                &:-webkit-autofill:focus {
                    -webkit-box-shadow: 0 0 0 $global-input-height $input-autofill-background-color inset;
                    -webkit-text-fill-color: $input-autofill-color;
                    transition: $global-input-transition;
                }
            }
        }

        // Loop all standard and cross browsing inputs. Extended with placeholder mixin `%style-inputs`.
        // Hide default focus ring in Firefox/Gecko `:-moz-focusring` with current `$global-input-color`.
        @each $input-type in (email, password, search, select, tel, text, textarea, url) {
            @if ($input-type == select or $input-type == textarea) {
                #{$input-type} {
                    @extend %style-inputs;
                    @extend %autofill !optional;

                    @if ($input-type == select) {
                        &:-moz-focusring {
                            color: transparent;
                			text-shadow: 0 0 0 $global-input-color;
                        }
                    }

                    @if ($input-type != select) {
                        @extend %placeholder-style;
                    }
                }
            } @else {
                input[type="#{$input-type}"] {
                    @extend %style-inputs;
                    @extend %placeholder-style;
                    @extend %autofill !optional;
                }
            }
        }

        select {
            text-transform: $global-select-text-transform;
            @if ($global-select-caret-shape-render) {
                @include select-caret-shape($global-select-caret-color, $global-select-caret-shape);

                @if ($global-select-caret-shape != 'empty') {
                    background-size: $global-select-caret-size;
                }
            } @else {
                background-image: url(#{$global-select-caret-image-url});
                background-size: $global-select-caret-background-size;
            }

            @if ($global-select-caret-shape != 'empty') {
                background-repeat: no-repeat;
                background-position: center right;
                background-origin: content-box;
            }

            &[multiple] {
                text-transform: $global-select-text-transform;
                background-image: none;
                height: auto;
                cursor: default;
            }
        }

        textarea {
            height: $global-textarea-height;
            @if ($global-textarea-resize) {
                resize: $global-textarea-resize-mode;
            } @else {
                resize: none;
            }
        }
    }
}
