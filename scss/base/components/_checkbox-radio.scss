// RenderKit
// github.com/matteobertoldo/renderkit
// Licensed under MIT Open Source

////
/// @group checkbox & radio
////

/// If set to `true` the alignment of the checkbox & radio components will line up in the middle of the text.
$global-custom-checkbox-radio-align-center: false !default;

/// The size the global dimension of the checkbox & radio components.
$global-custom-checkbox-radio-size: 24px !default;

/// Default font family for checkbox & radio components.
$global-custom-checkbox-radio-font-family: sans-serif !default;

/// Default font size for checkbox & radio components.
$global-custom-checkbox-radio-font-size: 12px !default;

/// Default text transform for checkbox & radio components.
$global-custom-checkbox-radio-text-transform: none !default;

/// Default letter spacing for checkbox & radio components.
$global-custom-checkbox-radio-letter-spacing: normal !default;

/// Default color for checkbox & radio components.
$global-custom-checkbox-radio-color: #666 !default;

/// The space between the label text and the shape of the checkbox or radio component.
$custom-checkbox-radio-label-gutter: 10px !default;

@mixin checkbox-radio-classes {
    /*@custom input checkbox & radio*/
    .input-checkbox,
    .input-radio {
        @if ($global-custom-checkbox-radio-align-center) {
            display: inline-block;
        } @else {
            display: inline-flex;
            align-items: center;
            min-height: $global-custom-checkbox-radio-size;
        }
    	position: relative;
        font: {
            family: $global-custom-checkbox-radio-font-family;
            size: $global-custom-checkbox-radio-font-size;
        }
        text-transform: $global-custom-checkbox-radio-text-transform;
        letter-spacing: $global-custom-checkbox-radio-letter-spacing;
        color: $global-custom-checkbox-radio-color;
        margin: 0;
    	padding-left: $global-custom-checkbox-radio-size + $custom-checkbox-radio-label-gutter;
        cursor: $global-custom-checkbox-radio-cursor;

    	&::before,
        &::after {
    		content: '';
    		position: absolute;
    	}

    	&::before {
            @if ($global-custom-checkbox-radio-align-center) {
                top: 50%;
            } @else {
                top: 0;
            }
    		left: 0;
    		width: $global-custom-checkbox-radio-size;
    		height: $global-custom-checkbox-radio-size;
            background-color: $global-input-background-color;
    		border: $global-input-border;
    		border-radius: $global-input-border-radius;
            @if ($global-custom-checkbox-radio-align-center) {
                margin-top: -(rem($global-custom-checkbox-radio-size / 2));
            }
    		transition: border-color 0.3s ease;
            overflow: hidden;
    	}

    	&::after {
    		transition: transform 0.3s ease;
    	}
    }

    // Global marker size for checkbox & radio.
    // The marker will always be half size compared to `$global-custom-checkbox-radio-size`.
    // @return {Integer|Float}
    $marker-size: ($global-custom-checkbox-radio-size / 2);
    $marker-size-half: ($marker-size / 2);

    .input-checkbox {
        &::after {
            @if ($global-custom-checkbox-radio-align-center) {
                top: 50%;
            } @else {
                top: rem($global-custom-checkbox-radio-size - ($marker-size + $marker-size-half));
            }
    		left: rem(($global-custom-checkbox-radio-size - $marker-size-half) / 2);
    		@include arrow(rem($marker-size-half), rem($marker-size), $custom-checkbox-mark-color, $custom-checkbox-mark-thick);
            @if ($global-custom-checkbox-radio-align-center) {
                margin-top: -(rem($marker-size-half));
            }
    		transform: scale3d(0, 0, 0) rotate3d(0, 0, 1, 45deg) translate3d(0, 0, 0);
    	}

        input[type="checkbox"][disabled] + & {
            opacity: $global-disable-input-opacity !important;
        }

        @if ($global-custom-checkbox-radio-hover-border) {
    		input[type="checkbox"]:not([disabled]) + &:hover {
                &::before {
                    border-color: $global-custom-checkbox-radio-hover-border-color;
                }
            }
        }

    	input[type="checkbox"]:checked + & {
    		@if ($global-custom-checkbox-radio-checked-border) {
    			&::before {
    				border-color: $custom-checkbox-checked-border;
    			}
    		}

    		&::after {
    			transform: scale3d(1, 1, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, 0, 0);
    		}
    	}

        input[type="checkbox"]:focus:not(:checked) + & {
            &::before {
                border-color: $global-focus-input-border-color;
            }
        }

        input[type="checkbox"].#{$validation-input-error-class}:not([disabled]) + & {
            &::before {
                border-color: $validation-input-error-border-color;
                background-color: $validation-input-error-background-color;
            }
        }

        input[type="checkbox"].#{$validation-input-error-class}:focus:not(:checked) + & {
            &::before {
                border-color: $validation-input-error-border-color;
            }
        }

        @if ($custom-checkbox-radio-outline-detect) {
            @if ($custom-checkbox-radio-what-input-outline-detect) {
                [data-whatinput="initial"] input[type="checkbox"]:focus + &,
                [data-whatinput="keyboard"] input[type="checkbox"]:focus + & {
                    &::before {
                        outline: -webkit-focus-ring-color auto 5px;
                        outline-offset: -2px;
                     }
                }
            } @else {
                input[type="checkbox"]:focus + & {
                    &::before {
                        outline: -webkit-focus-ring-color auto 5px;
                        outline-offset: -2px;
                    }
                 }
            }
        }
    }

    .input-radio {
        &::before,
        &::after {
    		border-radius: 50%;
    	}

    	&::after {
            @if ($global-custom-checkbox-radio-align-center) {
                top: 50%;
            } @else {
                top: rem(($global-custom-checkbox-radio-size - $marker-size) / 2);
            }
    		left: rem(($global-custom-checkbox-radio-size - $marker-size) / 2);
    		width: rem($marker-size);
    		height: rem($marker-size);
    		background-color: $custom-radio-mark-color;
            @if ($global-custom-checkbox-radio-align-center) {
                margin-top: -(rem($marker-size / 2));
            }
    		transform: scale3d(0, 0, 0) translate3d(0, 0, 0);
    	}

        input[type="radio"][disabled] + & {
            opacity: $global-disable-input-opacity !important;
        }

        @if ($global-custom-checkbox-radio-hover-border) {
    		input[type="radio"]:not([disabled]) + &:hover {
                &::before {
                    border-color: $global-custom-checkbox-radio-hover-border-color;
                }
            }
        }

    	input[type="radio"]:checked + & {
    		@if ($global-custom-checkbox-radio-checked-border) {
    			&::before {
    				border-color: $custom-radio-checked-border;
    			}
    		}

    		&::after {
    			transform: scale3d(1, 1, 1) translate3d(0, 0, 0);
    		}
    	}

        input[type="radio"]:focus:not(:checked) + & {
            &::before {
                border-color: $global-focus-input-border-color;
            }
        }

        input[type="radio"].#{$validation-input-error-class} + & {
            &::before {
                border-color: $validation-input-error-border-color;
            }
        }

        input[type="radio"].#{$validation-input-error-class}:focus:not(:checked) + & {
            &::before {
                border-color: $validation-input-error-border-color;
            }
        }

        @if ($custom-checkbox-radio-outline-detect) {
            @if ($custom-checkbox-radio-what-input-outline-detect) {
                [data-whatinput="initial"] input[type="radio"]:focus + &,
                [data-whatinput="keyboard"] input[type="radio"]:focus + & {
                    &::before {
                        outline: -webkit-focus-ring-color auto 5px;
                        outline-offset: -2px;
                     }
                }
            } @else {
                input[type="radio"]:focus + & {
                    &::before {
                        outline: -webkit-focus-ring-color auto 5px;
                        outline-offset: -2px;
                    }
                 }
            }
        }
    }
}
