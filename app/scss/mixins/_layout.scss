// @mixins layout
// @author: mbertoldo@alpenite.com
// @component: core

// Mixin Triangle from https://github.com/zurb/foundation-sites/blob/develop/scss/util/_mixins.scss
// Creates a CSS triangle, which can be used for dropdown arrows, dropdown pips, and more. Use this mixin inside a `&::before` or `&::after` selector, to attach the triangle to an existing element.
// @param-1: {Number} $triangle-size - Width of the triangle.
// @param-2: {Color} $triangle-color - Color of the triangle.
// @param-3: {Keyword} $triangle-direction - Direction the triangle points. Can be `up`, `right`, `down`, or `left`.
// ----------------------------

@mixin triangle($triangle-size, $triangle-color, $triangle-direction: down) {
	display: block;
	width: 0;
	height: 0;
	border: inset $triangle-size;

	@if ($triangle-direction == down) {
		border-color: $triangle-color transparent transparent;
		border-top-style: solid;
		border-bottom-width: 0;
	} @else if ($triangle-direction == up) {
		border-color: transparent transparent $triangle-color;
		border-bottom-style: solid;
		border-top-width: 0;
	} @else if ($triangle-direction == right) {
		border-color: transparent transparent transparent $triangle-color;
		border-left-style: solid;
		border-right-width: 0;
	} @else if ($triangle-direction == left) {
		border-color: transparent $triangle-color transparent transparent;
		border-right-style: solid;
		border-left-width: 0;
	}
}

// Mixin Arrow
// Creates a CSS arrow, which can be used for dropdown arrows, dropdown pips, and more. Use this mixin inside a `&::before` or `&::after` selector, to attach the arrow to an existing element.
// @param-1: {Number} $arrow-width - Width of the arrow.
// @param-2: {Number} $arrow-height - Height of the arrow.
// @param-3: {Color} $arrow-color - Color of the arrow.
// @param-4: {Number} $arrow-border-width - The border width of the arrow.
// @author: mbertoldo@alpenite.com
// ----------------------------

@mixin arrow($arrow-width, $arrow-height, $arrow-color, $arrow-border-width, $arrow-direction: null) {
	display: block;
	width: $arrow-width;
	height: $arrow-height;
	border: solid $arrow-color;
	border-width: 0 $arrow-border-width $arrow-border-width 0;

	@if ($arrow-direction == down) {
		transform: rotate3d(0, 0, 1, 45deg);
	} @else if ($arrow-direction == up) {
		transform: rotate3d(0, 0, 1, -135deg);
	} @else if ($arrow-direction == right) {
		transform: rotate3d(0, 0, 1, -45deg);
	} @else if ($arrow-direction == left) {
		transform: rotate3d(0, 0, 1, 135deg);
	}
}

// Mixin for Placeholder, create multiple instances of the placeholder pseudo element.
// @param: `-moz-` render the pseudo placeholder element with opacity included. We set it's value to 1 if you want to see the full color.
// @param: `$on-focus` if `focus-hidden` is set, we make clear the pseudo element (only in -webkit- and -moz- render, in IE is already present this behavior.)
// @author: mbertoldo@alpenite.com
// ----------------------------------

// @use 1: (placeholder color is #ccc, on focus nothing will happen: default)
// ------------------------
// .myselector {
// 		@include placeholder(#ccc);
// }

// @use 2: (placeholder color is #ccc, on focus it will be hidden)
// ------------------------
// .myselector {
// 		@include placeholder(#ccc, 'focus-hidden');
// }

// @use 3: (placeholder color is #ccc on focus will become #333)
// ------------------------
// .myselector {
// 		@include placeholder(#ccc, 'focus', #333);
// }

@mixin placeholder($placeholder-color, $on-focus: null, $placeholder-focus-color: initial) {
	$prefix: '-placeholder';

	@each $vendor in ('::-webkit-input', '::-moz', ':-ms') {
		&#{$vendor}#{$prefix} {
			color: $placeholder-color;

            @if ($vendor == '::-moz') {
				opacity: 1;
			}
		}

        @if ($on-focus == 'focus') {
            &:focus#{$vendor}#{$prefix} {
                &:focus#{$vendor}#{$prefix} {
                    @if ($vendor != ':-ms') {
                        color: $placeholder-focus-color;
                    }
                }
            }
        } @else if ($on-focus == 'focus-hidden') {
            &:focus#{$vendor}#{$prefix} {
                @if ($vendor != ':-ms') {
                    opacity: 0;
                }
            }
        }
	}
}

// Counter Increment Mixin, create a numerated list.
// @require: {counter-reset: section;} defined on a parent selector
// @note: include this on a child selector on `::before`, your separator, space or not.
// @author: mbertoldo@alpenite.com
// ----------------------------------

@mixin counter-increment($separator, $space: space) {
	@if ($space == 'no-space') {
		$space: '';
	} @else {
		$space: ' ';
	}

	counter-increment: section;
	content: counters(section,'#{$separator}') $space;
}

// Clearfix Mixin, restores the height if the children have a float set.
// @note: $global-flexbox-clearfix -> (http://danisadesigner.com/blog/flexbox-clear-fix-pseudo-elements/)
// ----------------------------------

@mixin clearfix {
	&::before, &::after {
		content: '';
		display: table;

		@if ($global-flexbox-clearfix) {
			flex-basis: 0;
			order: 1;
		}
	}

	&::after {
		clear: both;
	}
}

// Firefox Fix Mixin, This mixin creates exclusive rules for Gecko browsers.
// ----------------------------------

@mixin fix-firefox {
	@-moz-document url-prefix() {
		@content;
	}
}

// Mixin for fix rules in very old IE browsers like IE6/7.
// ----------------------------

@mixin fix-old-ie {
	* html & {
		@content;
	}
}
