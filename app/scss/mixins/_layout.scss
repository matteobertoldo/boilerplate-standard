// @mixins layout
// @author: mbertoldo@alpenite.com
// @component: core

// Mixin for responsive mode (generally for <img/> || <video/> tags).
// ----------------------------------

@mixin responsive-mode {
	max-width: 100%;
	height: auto;
	vertical-align: middle;
}

// Mixin Triangle from https://github.com/zurb/foundation-sites/blob/develop/scss/util/_mixins.scss
// Creates a CSS triangle, which can be used for dropdown arrows, dropdown pips, and more. Use this mixin inside a `&::before` or `&::after` selector, to attach the triangle to an existing element.
// @param-1: {Number} $triangle-size - Width of the triangle.
// @param-2: {Color} $triangle-color - Color of the triangle.
// @param-3: {Keyword} $triangle-direction - Direction the triangle points. Can be `up`, `right`, `down`, or `left`.
// ----------------------------

@mixin triangle($triangle-size, $triangle-color, $triangle-direction: down) {
	width: 0;
	height: 0;
	border: inset $triangle-size;

	@if ($triangle-direction == down) {
		border-color: $triangle-color transparent transparent;
		border-top-style: solid;
		border-bottom-width: 0;
	} @else if ($triangle-direction == up) {
		border-color: transparent transparent $triangle-color;
		border-bottom-style: solid;
		border-top-width: 0;
	} @else if ($triangle-direction == right) {
		border-color: transparent transparent transparent $triangle-color;
		border-left-style: solid;
		border-right-width: 0;
	} @else if ($triangle-direction == left) {
		border-color: transparent $triangle-color transparent transparent;
		border-right-style: solid;
		border-left-width: 0;
	}
}

// Mixin Arrow
// Creates a CSS arrow, which can be used for dropdown arrows, dropdown pips, and more. Use this mixin inside a `&::before` or `&::after` selector, to attach the arrow to an existing element.
// @param-1: {Number} $arrow-width - Width of the arrow.
// @param-2: {Number} $arrow-height - Height of the arrow.
// @param-3: {Color} $arrow-color - Color of the arrow.
// @param-4: {Number} $arrow-border-width - The border width of the arrow.
// @author: mbertoldo@alpenite.com
// ----------------------------

@mixin arrow($arrow-width, $arrow-height, $arrow-color, $arrow-border-width, $arrow-direction: null) {
	width: $arrow-width;
	height: $arrow-height;
	border: solid $arrow-color;
	border-width: 0 $arrow-border-width $arrow-border-width 0;

	@if ($arrow-direction == down) {
		transform: rotate3d(0, 0, 1, 45deg);
	} @else if ($arrow-direction == up) {
		transform: rotate3d(0, 0, 1, -135deg);
	} @else if ($arrow-direction == right) {
		transform: rotate3d(0, 0, 1, -45deg);
	} @else if ($arrow-direction == left) {
		transform: rotate3d(0, 0, 1, 135deg);
	}
}

// Mixin for Placeholder, create multiple instances of the placeholder pseudo element.
// @param 2: -moz-core render the pseudo placeholder element with opacity included. We set it's value to 1 if you want to see the full color
// @param 3: single colon for IE10+
// @param 4: Microsoft Edge accept double colons "::"
// @param $on-focus: if focus-out is set we make clear the pseudo element (only in -webkit-core and -moz-core, in IE is already present this behavior)
// @use 1: .myselector { @include placeholder(#ccc, focus, #333); } (placeholder color is #ccc on focus will become #333)
// @use 2: .myselector { @include placeholder(#ccc, focus-hidden, null); } (placeholder color is #ccc, on focus it will be hidden)
// @use 3: .myselector { @include placeholder(#ccc, null, null); } (placeholder color is #ccc, on focus nothing will happen: default)
// @author: mbertoldo@alpenite.com
// ----------------------------------

@mixin placeholder($placeholder-color, $on-focus: null, $placeholder-focus-color: null) {
	&::-webkit-input-placeholder {
		color: $placeholder-color;
	}

	@if $on-focus == focus {
		&:focus::-webkit-input-placeholder {
			color: $placeholder-focus-color;
		}
	} @else if $on-focus == focus-hidden {
		&:focus::-webkit-input-placeholder {
			opacity: 0;
		}
	}

	&::-moz-placeholder  {
		color: $placeholder-color;
		opacity: 1;
	}

	@if $on-focus == focus {
		&:focus::-moz-placeholder {
			color: $placeholder-focus-color;
		}
	} @else if $on-focus == focus-hidden {
		&:focus::-moz-placeholder {
			opacity: 0;
		}
	}

	&:-ms-placeholder {
		color: $placeholder-color;
	}

	@if $on-focus == focus {
		&:focus:-ms-placeholder {
			color: $placeholder-focus-color;
		}
	}

	&::-ms-placeholder {
		color: $placeholder-color;
	}

	@if $on-focus == focus {
		&:focus::-ms-placeholder {
			color: $placeholder-focus-color;
		}
	}
}

// Counter Increment Mixin, create a numerated list.
// @require: {counter-reset: section;} defined on a parent selector
// @note: include this on a child selector on `::before`, your separator, space or not.
// @author: mbertoldo@alpenite.com
// ----------------------------------

@mixin counter-increment($separator, $space: space) {
	@if $space == no-space {
		$space: '';
	} @else {
		$space: ' ';
	}

	counter-increment: section;
	content: counters(section,'#{$separator}') $space;
}

// Clearfix Mixin, restores the height if the children have a float set.
// @note: $global-flexbox-clearfix -> (http://danisadesigner.com/blog/flexbox-clear-fix-pseudo-elements/)
// ----------------------------------

@mixin clearfix {
	&::before, &::after {
		content: '';
		display: table;

		@if $global-flexbox-clearfix {
			flex-basis: 0;
			order: 1;
		}
	}

	&::after {
		clear: both;
	}
}

// Firefox Fix Mixin, This mixin creates exclusive rules for Gecko browsers.
// ----------------------------------

@mixin fix-firefox {
	@-moz-document url-prefix() {
		@content;
	}
}

// Mixin for fix rules in very old IE browsers like IE6/7.
// ----------------------------

@mixin fix-old-ie {
	* html & {
		@content;
	}
}
