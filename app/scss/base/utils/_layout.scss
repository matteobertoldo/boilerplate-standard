// Mixin for visuallyhidden.
// @note: this hide the target element visually only, but not it's interaction.
// --------------------------------

@mixin visuallyhidden {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    border: 0 !important;
    white-space: nowrap !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
    overflow: hidden !important;
    margin: -1px !important;
    padding: 0 !important;
}

// Mixin for visuallyhidden-off.
// @note: restores the style applied by `visuallyhidden` mixin.
// --------------------------------

@mixin visuallyhidden-off {
    position: static !important;
    width: auto !important;
    height: auto !important;
    border: initial !important;
    white-space: inherit !important;
    clip: none !important;
    overflow: inherit !important;
    margin: 0 !important;
}

// Mixin for Placeholder, create multiple instances of the placeholder pseudo element.
// @param: `-moz-` render the pseudo placeholder element with opacity included. We set it's value to 1 if you want to see the full color.
// @param: `$on-focus` if `focus-hidden` is set, we make clear the pseudo element (only in -webkit- and -moz- render, in IE is already present this behavior.)
// @author: mbertoldo@alpenite.com
// @access: private

// @use 1: (placeholder color is #ccc)
// .myselector {
// 		@include placeholder(#ccc);
// }

// @use 2: (placeholder color is #ccc, on focus it will be hidden)
// .myselector {
// 		@include placeholder(#ccc, 'focus-hidden');
// }

// @use 3: (placeholder color is #ccc on focus will become #333)
// .myselector {
// 		@include placeholder(#ccc, 'focus', #333);
// }
// --------------------------------

@mixin placeholder($placeholder-color, $on-focus: null, $placeholder-focus-color: initial) {
	$prefix: '-placeholder';

	@each $vendor in ('::-webkit-input', '::-moz', ':-ms') {
		&#{$vendor}#{$prefix} {
			color: $placeholder-color;

            @if ($vendor == '::-moz') {
				opacity: 1;
			}
		}

        @if ($on-focus == 'focus') {
            &:focus#{$vendor}#{$prefix} {
                @if ($vendor != ':-ms') {
                    color: $placeholder-focus-color;
                }
            }
        } @else if ($on-focus == 'focus-hidden') {
            &:focus#{$vendor}#{$prefix} {
                @if ($vendor != ':-ms') {
                    opacity: 0;
                }
            }
        }
	}
}

// Mixin for create a "layer" position.
// @note: can be used for modals.
// @author: mbertoldo@alpenite.com
// --------------------------------

@mixin layer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

// Mixin for simplify the syntax for iOS smooth scroll
// --------------------------------

@mixin ios-scroll {
    -webkit-overflow-scrolling: touch;
}
