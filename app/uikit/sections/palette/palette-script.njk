<script type="text/javascript">
/**
 * @function: RGBtoHEX
 * @param: {string}
 * @return: {string}
 */

function RGBtoHEX(r, g, b) {
    var rgb = b | (g << 8) | (r << 16);

    return (0x1000000 | rgb).toString(16).substring(1);
}

/**
 * @function: invertColor
 * @param hex: {string} HEX code
 * @param bw: {Bool} dinamically set black || white the final color
 * @return: {string}
 * @note: https://github.com/onury/invert-color
 */

function padZero(str, len) {
    len = len || 2;
    var zeros = new Array(len).join('0');

    return (zeros + str).slice(-len);
}

function invertColor(hex, bw) {
    if (hex.indexOf('#') === 0) {
        hex = hex.slice(1);
    }

    if (hex.length === 3) {
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    }

    if (hex.length !== 6) {
        throw new Error('Invalid HEX color.');
    }

    var r = parseInt(hex.slice(0, 2), 16),
    g = parseInt(hex.slice(2, 4), 16),
    b = parseInt(hex.slice(4, 6), 16);

    if (bw) {
        return (r * 0.299 + g * 0.587 + b * 0.114) > 186 ? '#000000' : '#FFFFFF';
    }

    r = (255 - r).toString(16);
    g = (255 - g).toString(16);
    b = (255 - b).toString(16);

    return "#" + padZero(r) + padZero(g) + padZero(b);
}

/**
 * @function color_convert()
 * @note: https://gist.github.com/njvack/02ad8efcb0d552b0230d
 * @description: convert to `rga` or `hex` an HTML color name.
 * @note: HTML colors name https://www.w3schools.com/colors/colors_names.asp
 */

color_convert = function() {
    var pub = {}, canvas, context;
    canvas = document.createElement('canvas');
    canvas.height = 1;
    canvas.width = 1;
    context = canvas.getContext('2d');

    function byte_to_hex(byte) {
        return ('0' + byte.toString(16)).slice(-2);
    }

    pub.to_rgba_array = function(color) {
        context.fillStyle = 'rgba(0, 0, 0, 0)';
        context.clearRect(0, 0, 1, 1);
        context.fillStyle = color;
        context.fillRect(0, 0, 1, 1);
        return context.getImageData(0, 0, 1, 1).data;
    }

    pub.to_rgba = function(color) {
        var a = pub.to_rgba_array(color);
        return 'rgba('+ a[0] +','+ a[1] +','+ a[2] +','+ (a[3]/255) +')';
    }

    pub.to_hex = function(color) {
        var a = pub.to_rgba_array(color);
        var hex = [0,1,2].map(function(i) {
            return byte_to_hex(a[i])
        }).join('');

        return '#' + hex;
    }

    return pub;
}();

/**
 * @function: createPaletteElements
 * @param: {regEx, property, stylesheets}
 * @return: {Obj}
 * @author: mbertoldo@alpenite.com
 */

function createPaletteElements(selector, style, sheet) {
    var sheets = typeof sheet !== 'undefined' ? [sheet] : document.styleSheets;

    for (var i = 0, l = sheets.length; i < l; i++) {
        var sheet = sheets[i];

        if (!sheet.cssRules) {
            continue;
        }

        for (var j = 0, k = sheet.cssRules.length; j < k; j++) {
            var rule = sheet.cssRules[j];

            if (selector.test(rule.selectorText)) {
                var selectors = rule.selectorText.replace(/\.palette-color-/g,'');
                var rgb = rule.style[style].split(',');

                if (rgb.length > 1) {
                    var r = rgb[0].replace('rgb(', '');
                    var g = rgb[1];
                    var b = rgb[2].replace(')', '');
                    var hex = RGBtoHEX(r, g, b);
                    var hextext = '#' + hex.toString();
                } else {
                    var hex = color_convert.to_hex(rgb[0]);
                    var hextext = rgb[0];
                }

                var color = invertColor(hex, true);
                var list = document.createElement('li');
                var p = document.createElement('p');
                var span = document.createElement('span');
                var em = document.createElement('em');
                var strong = document.createElement('strong');
                var rgbtext = rule.style[style].toString();

                span.appendChild(document.createTextNode(hextext));
                strong.appendChild(document.createTextNode(selectors));
                em.appendChild(document.createTextNode(rgbtext));
                p.setAttribute('style', 'color:' + color + ';');
                p.appendChild(strong);
                p.appendChild(span);
                p.appendChild(em);

                list.appendChild(p);
                list.setAttribute('style', 'background-color:' + hextext + ';');

                document.getElementById('palette-list').appendChild(list);
            }
        }
    }
}

window.addEventListener('load', function() {
    createPaletteElements(/^\.palette-color-[^ ]+$/, 'color');
});
</script>
